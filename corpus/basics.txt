==================
Namespaces
==================
NameSpace A;
UseNameSpace B;
NameSpace;
UseNameSpace;
---
(source_file
  (namespace_definition (scalar_identifier))
  (use_namespace_definition (scalar_identifier))
  (namespace_definition)
  (use_namespace_definition))

==================
Empty Module
==================
Module foo { }
---
(source_file
  (module_definition
    (scalar_identifier)
    (module_body)))

==================
Integer Expressions
==================
Parameter foo = 1;
Parameter foo = 1 + 1;
Parameter foo = $FOO - $BAR;
Parameter foo = 1 + (2 * 3);
Parameter foo = ($FOO % 7) / 2;
---
(source_file
      (parameter_definition
        (scalar_identifier)
        (parameter_value
          (concat_number
            (positive_integer))))
      (parameter_definition
        (scalar_identifier)
        (parameter_value
          (concat_number
            (integer_expression
              (positive_integer)
              (positive_integer)))))
      (parameter_definition
        (scalar_identifier)
        (parameter_value
          (concat_number
            (integer_expression
              (parameter_reference)
              (parameter_reference)))))
      (parameter_definition
        (scalar_identifier)
        (parameter_value
          (concat_number
            (integer_expression
              (positive_integer)
                (integer_expression
                  (positive_integer)
                  (positive_integer))))))
      (parameter_definition
        (scalar_identifier)
        (parameter_value
          (concat_number
            (integer_expression
              (integer_expression
                (parameter_reference)
                (positive_integer))
            (positive_integer))))))

==================
Logic Expressions
==================
LogicSignal foo { a && b; }
LogicSignal foo { a || b; }
LogicSignal foo { !a; }
LogicSignal foo { ~a; }
LogicSignal foo { a & b; }
LogicSignal foo { a | b; }
LogicSignal foo { a ^ b; }
LogicSignal foo { a == b; }
LogicSignal foo { a != b; }
LogicSignal foo { (a & !b) | c; }
---
(source_file
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (concat_signal
              (signal
                (scalar_identifier))))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (enum_name))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (concat_signal
              (signal
                (scalar_identifier)))
            (enum_name))))
      (logic_signal_definition
        (scalar_identifier)
        (logic_expression
          (logic_expression
            (logic_expression
              (logic_expression
                (concat_signal
                  (signal
                    (scalar_identifier)))
                (concat_signal
                  (signal
                    (scalar_identifier)))))
            (concat_signal
              (signal
                (scalar_identifier)))))))

==================
Index and Ranges
==================
DataInPort foo[0];
DataInPort foo[2+3];
DataInPort foo[$FOO];
DataInPort foo[1:0];
DataInPort foo[$FOO-1:0];
---
(source_file
  (data_in_port_definition
    (vector_identifier
      (scalar_identifier)
      (index
        (integer_expression
          (positive_integer)))))
  (data_in_port_definition
    (vector_identifier
      (scalar_identifier)
      (index
        (integer_expression
          (positive_integer)
          (positive_integer)))))
  (data_in_port_definition
    (vector_identifier
      (scalar_identifier)
      (index
        (integer_expression
          (parameter_reference)))))
  (data_in_port_definition
    (vector_identifier
      (scalar_identifier)
      (range
        (index
          (integer_expression
            (positive_integer)))
        (index
          (integer_expression
            (positive_integer))))))
  (data_in_port_definition
    (vector_identifier
      (scalar_identifier)
      (range
        (index
          (integer_expression
            (parameter_reference)
            (positive_integer)))
        (index
          (integer_expression
            (positive_integer)))))))

==================
Numbers
==================
Attribute foo = 8'b0000_0001;
Attribute foo = 'B0000_0001;
Attribute foo = 4'd8;
Attribute foo = 'D7;
Attribute foo = 32'hdead_beef;
Attribute foo = 'Hdead_beef;
---
(source_file
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (sized_binary_number
          (size
            (positive_integer))
          (unsized_binary_number)))))
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (unsized_binary_number))))
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (sized_decimal_number
          (size
            (positive_integer))
          (unsized_decimal_number
            (positive_integer))))))
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (unsized_decimal_number
          (positive_integer)))))
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (sized_hex_number
          (size
            (positive_integer))
          (unsized_hex_number)))))
  (attribute_definition
    (scalar_identifier)
    (attribute_value
      (concat_number
        (unsized_hex_number)))))
